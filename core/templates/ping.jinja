<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Ping Test</title>
  <style>
    body        { font-family: sans-serif; max-width: 640px; margin: 2rem auto; }
    #stats span { display: inline-block; min-width: 6rem; }
    #status     { margin-top: 1rem; color: green; }
    canvas      { margin-top: 1.5rem; background:#fafafa; border:1px solid #ddd; }
  </style>
</head>
<body>
  <h1>Ping Test</h1>

  <button id="startBtn">Start test</button>
  <div id="status"></div>

  <h2>Results</h2>
  <div id="stats">
    <p><span>Current:</span> <strong id="cur">—</strong> ms</p>
    <p><span>Min:</span>     <strong id="min">—</strong> ms</p>
    <p><span>Max:</span>     <strong id="max">—</strong> ms</p>
    <p><span>Avg:</span>     <strong id="avg">—</strong> ms</p>
  </div>

  <canvas id="ruler" width="600" height="80"></canvas>

  <script>
    /* ---------- DOM handles ---------- */
    const startBtn = document.getElementById('startBtn');
    const curEl    = document.getElementById('cur');
    const minEl    = document.getElementById('min');
    const maxEl    = document.getElementById('max');
    const avgEl    = document.getElementById('avg');
    const status   = document.getElementById('status');

    /* ---------- canvas ---------- */
    const canvas = document.getElementById('ruler');
    const ctx    = canvas.getContext('2d');
    const pad    = 40;             // left / right padding
    const baseY  = 40;             // y‑coord of baseline
    const MAX_SAMPLES = 1000;      // keep last N samples

    /* ---------- state ---------- */
    const samples = [];            // RTT history
    let timerId = null;

    /* ---------- helpers ---------- */
    function tick(x, color, alpha = 1) {
      ctx.save();
      ctx.globalAlpha = alpha;
      ctx.strokeStyle = color;
      ctx.beginPath();
      ctx.moveTo(x, baseY - 12);
      ctx.lineTo(x, baseY + 12);
      ctx.stroke();
      ctx.restore();
    }

    function drawChart() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      if (samples.length < 2) return;  // need span

      const min = Math.min(...samples);
      const max = Math.max(...samples);
      const span = max - min || 1;               // avoid div‑by‑zero
      const scale = (canvas.width - 2*pad) / span;
      const xPos  = v => pad + (v - min) * scale;
      const avg   = samples.reduce((a, b) => a + b, 0) / samples.length;

      /* ---- baseline & labels ---- */
      ctx.strokeStyle = '#000';
      ctx.beginPath();
      ctx.moveTo(pad, baseY);
      ctx.lineTo(canvas.width - pad, baseY);
      ctx.stroke();
      ctx.fillStyle = '#000';
      ctx.fillText(min.toFixed(2), pad - 15, baseY + 20);
      ctx.fillText(max.toFixed(2), canvas.width - pad - 25, baseY + 20);

      /* ---- historical ticks ---- */
      samples.forEach(v => tick(xPos(v), '#000', 0.25));

      /* ---- average tick ---- */
      tick(xPos(avg), '#007bff', 1);

      /* ---- numbers above canvas ---- */
      curEl.textContent = samples[samples.length - 1].toFixed(2);
      minEl.textContent = min.toFixed(2);
      maxEl.textContent = max.toFixed(2);
      avgEl.textContent = avg.toFixed(2);
    }

    /* ---------- ping loop ---------- */
    async function ping() {
      const t0 = performance.now();
      try {
        const res = await fetch('?ping', { cache: 'no-store' });
        await res.json();
        const rtt = performance.now() - t0;

        samples.push(rtt);
        if (samples.length > MAX_SAMPLES) samples.shift();  // drop oldest

        drawChart();
      } catch {
        status.textContent = 'Ping failed - check network or backend';
        status.style.color = 'red';
        clearInterval(timerId);
      }
    }

    /* ---------- start ---------- */
    startBtn.addEventListener('click', () => {
      if (timerId) return;                // already running
      status.textContent = 'Running…';
      startBtn.disabled  = true;
      ping();                             // first sample immediately
      timerId = setInterval(ping, 100);   // then every 500 ms
    });
  </script>
</body>
</html>
