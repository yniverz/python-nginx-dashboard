<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Ping Test</title>
  <style>
    body        { font-family: sans-serif; max-width: 640px; margin: 2rem auto; }
    #stats span { display: inline-block; min-width: 6rem; }
    #status     { margin-top: 1rem; color: green; }
    canvas      { margin-top: 1.5rem; background:#fafafa; border:1px solid #ddd; }
  </style>
</head>
<body>
  <h1>Ping Test</h1>

  <button id="startBtn">Start test</button>
  <div id="status"></div>

  <h2>Results</h2>
  <div id="stats">
    <p><span>Current:</span> <strong id="cur">—</strong> ms</p>
    <p><span>Min:</span>     <strong id="min">—</strong> ms</p>
    <p><span>Max:</span>     <strong id="max">—</strong> ms</p>
    <p><span>Avg:</span>     <strong id="avg">—</strong> ms</p>
  </div>

  <!-- ruler canvas -->
  <canvas id="ruler" width="600" height="80"></canvas>

  <script>
    /* ---------- DOM handles ---------- */
    const startBtn = document.getElementById('startBtn');
    const curEl    = document.getElementById('cur');
    const minEl    = document.getElementById('min');
    const maxEl    = document.getElementById('max');
    const avgEl    = document.getElementById('avg');
    const status   = document.getElementById('status');

    /* ---------- canvas setup ---------- */
    const canvas = document.getElementById('ruler');
    const ctx    = canvas.getContext('2d');
    const pad    = 40;   // left/right padding
    const baseY  = 40;   // y‑coord of baseline

    /* ---------- state ---------- */
    let timerId   = null;
    let count     = 0, sum = 0;
    let minRTT    = Infinity, maxRTT = 0;

    let initMin   = null, initMax = null;       // baseline scale
    let baselineDrawn = false;

    /* ---------- drawing helpers ---------- */
    function drawBaseline() {
      // horizontal line
      ctx.beginPath();
      ctx.moveTo(pad, baseY);
      ctx.lineTo(canvas.width - pad, baseY);
      ctx.strokeStyle = '#000';
      ctx.stroke();

      // labels
      ctx.fillText(initMin.toFixed(2), pad - 15, baseY + 20);
      ctx.fillText(initMax.toFixed(2), canvas.width - pad - 25, baseY + 20);

      baselineDrawn = true;
    }

    function xPos(value) {
      const span = initMax - initMin;
      return pad + (value - initMin) * ((canvas.width - 2 * pad) / span);
    }

    function tick(x, color, alpha = 1) {
      ctx.save();
      ctx.globalAlpha = alpha;
      ctx.strokeStyle = color;
      ctx.beginPath();
      ctx.moveTo(x, baseY - 12);
      ctx.lineTo(x, baseY + 12);
      ctx.stroke();
      ctx.restore();
    }

    /* ---------- ping loop ---------- */
    async function ping() {
      const t0 = performance.now();
      try {
        const res = await fetch('?ping', { cache: 'no-store' });
        await res.json();
        const rtt = performance.now() - t0;

        /* --- update aggregates --- */
        count  += 1;
        sum    += rtt;
        minRTT  = Math.min(minRTT, rtt);
        maxRTT  = Math.max(maxRTT, rtt);
        const avg = sum / count;

        /* --- numbers on page --- */
        curEl.textContent = rtt.toFixed(2);
        minEl.textContent = minRTT.toFixed(2);
        maxEl.textContent = maxRTT.toFixed(2);
        avgEl.textContent = avg.toFixed(2);

        /* --- canvas --- */
        // lock baseline scale at first full min/max
        if (!baselineDrawn && minRTT !== maxRTT) {
          initMin = minRTT;
          initMax = maxRTT;
          drawBaseline();
        }
        if (!baselineDrawn) return; // still waiting for span

        // draw current tick – semi‑transparent black
        tick(xPos(rtt), '#000000', 0.25);

        // draw average tick – solid blue
        tick(xPos(avg), '#007bff', 1);
      } catch (err) {
        status.textContent = 'Ping failed – check network or backend';
        status.style.color = 'red';
        clearInterval(timerId);
      }
    }

    /* ---------- start button ---------- */
    startBtn.addEventListener('click', () => {
      if (timerId) return;                // already running
      status.textContent = 'Running…';
      startBtn.disabled  = true;
      ping();                             // immediate first hit
      timerId = setInterval(ping, 500);   // then every 500 ms
    });
  </script>
</body>
</html>
