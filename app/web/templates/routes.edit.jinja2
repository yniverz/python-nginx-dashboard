{% extends "_layout.jinja2" %}

{% block content %}
<h1>Edit Route</h1>

<form method="post" action="{{ url_for('update_route', route_id=route.id) }}">
    <div>
        <label for="domain_id">Domain:</label>
        <select id="domain_id" name="domain_id">
            {% for domain in domains %}
            <option value="{{ domain.id }}" {% if domain.id == route.domain_id %}selected{% endif %}>{{ domain.name }}</option>
            {% endfor %}
        </select>
    </div>
    <div>
        <label for="subdomain">Subdomain:</label>
        <input type="text" id="subdomain" name="subdomain" value="{{ route.subdomain }}">
    </div>
    <div>
        <label for="protocol">Protocol:</label>
        <select id="protocol" name="protocol">
            {% for proto in protocols %}
            <option value="{{ proto }}" {% if proto == route.protocol %}selected{% endif %}>{{ proto }}</option>
            {% endfor %}
        </select>
    </div>
    <div>
        <label for="path_prefix">Path Prefix:</label>
        <input type="text" id="path_prefix" name="path_prefix" value="{{ route.path_prefix }}">
    </div>
    <div>
        <label for="backend_path">Backend Path:</label>
        <input type="text" id="backend_path" name="backend_path" value="{{ route.backend_path }}">
    </div>
    <button type="submit">Save</button>
</form>

<a href="{{ url_for('delete_route', route_id=route.id) }}" onclick="return confirm('Are you sure?');">Delete</a>

<h2>Hosts</h2>
<table>
    <thead>
        <tr>
            <th>Host</th>
            <th>Weight</th>
            <th>Max Fails</th>
            <th>Fail Timeout</th>
            <th>Is Backup</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        {% for host in route.hosts %}
        <tr>
            <td>{{ host.host }}</td>
            <td>{{ host.weight }}</td>
            <td>{{ host.max_fails }}</td>
            <td>{{ host.fail_timeout }}</td>
            <td>{{ host.is_backup }}</td>
            <td>
                <form method="get" action="{{ url_for('toggle_host', route_id=route.id, host_id=host.id) }}">
                    <button type="submit">{{ 'Deactivate' if host.active else 'Activate' }}</button>
                </form>
                <form method="post" action="{{ url_for('delete_host', route_id=route.id, host_id=host.id) }}" onsubmit="return confirm('Are you sure?');">
                    <button type="submit">Delete</button>
                </form>
            </td>
        </tr>
        {% endfor %}
    </tbody>
</table>

<h3>Add Host</h3>
<form method="post" action="{{ url_for('create_host', route_id=route.id) }}">
    <label for="host">Host:</label>
    <input type="text" id="host" name="host">

    <label for="weight">Weight:</label>
    <input type="number" id="weight" name="weight" min="1">

    <label for="max_fails">Max Fails:</label>
    <input type="number" id="max_fails" name="max_fails" min="0">

    <label for="fail_timeout">Fail Timeout:</label>
    <input type="number" id="fail_timeout" name="fail_timeout" min="0">

    <label for="is_backup">Is Backup:</label>
    <input type="checkbox" id="is_backup" name="is_backup">

    <button type="submit">Add Host</button>
</form>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const protocolSelect = document.getElementById('protocol');
    const pathPrefixInput = document.getElementById('path_prefix');
    const pathPrefixLabel = document.querySelector('label[for="path_prefix"]');
    const backendPathDiv = document.querySelector('div:has(> #backend_path)');
    const originalLabel = "Path Prefix:";
    
    // Function to update the path field based on selected protocol
    function updatePathField() {
        const isStream = protocolSelect.value === 'STREAM';
        
        // Update label and input behavior
        if (isStream) {
            pathPrefixLabel.textContent = "Listen Port:";
            pathPrefixInput.setAttribute('placeholder', 'Port number (e.g. 8080)');
            pathPrefixInput.setAttribute('type', 'number');
            pathPrefixInput.setAttribute('min', '1');
            pathPrefixInput.setAttribute('max', '65535');
            
            // Remove any leading slash if present
            if (pathPrefixInput.value.startsWith('/')) {
                pathPrefixInput.value = pathPrefixInput.value.substring(1);
            }
            
            // Hide backend path for STREAM
            backendPathDiv.style.display = 'none';
        } else {
            pathPrefixLabel.textContent = originalLabel;
            pathPrefixInput.setAttribute('placeholder', 'Path prefix (e.g. /api)');
            pathPrefixInput.setAttribute('type', 'text');
            pathPrefixInput.removeAttribute('min');
            pathPrefixInput.removeAttribute('max');
            
            // Add leading slash if not present and not empty
            if (pathPrefixInput.value && !pathPrefixInput.value.startsWith('/')) {
                pathPrefixInput.value = '/' + pathPrefixInput.value;
            }
            
            // Show backend path for other protocols
            backendPathDiv.style.display = '';
        }
    }
    
    // Initialize on page load
    updatePathField();
    
    // Update when protocol changes
    protocolSelect.addEventListener('change', updatePathField);
    
    // Validate form before submission
    document.querySelector('form').addEventListener('submit', function(e) {
        if (protocolSelect.value === 'STREAM') {
            const port = parseInt(pathPrefixInput.value);
            if (isNaN(port) || port < 1 || port > 65535) {
                e.preventDefault();
                alert('For STREAM protocol, please enter a valid port number (1-65535)');
            }
        }
    });
});
</script>
{% endblock %}